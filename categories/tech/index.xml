<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on 一间茅庐</title><link>https://victoratmaoludotone.github.io/categories/tech/</link><description>Recent content in Tech on 一间茅庐</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 16 Jun 2020 11:16:23 +0800</lastBuildDate><atom:link href="https://victoratmaoludotone.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 rsync 备份群晖资料到 VPS</title><link>https://victoratmaoludotone.github.io/posts/backup-synogy-to-vps-using-rsync/</link><pubDate>Tue, 16 Jun 2020 11:16:23 +0800</pubDate><guid>https://victoratmaoludotone.github.io/posts/backup-synogy-to-vps-using-rsync/</guid><description>虽然家里的群晖做了 RAID 1，但看到有帖子说有人家里火灾导致 NAS 的热备份和硬盘的冷备份全部丢失，再加上最近在家赋闲，又想着折腾一番。
一、为什么要使用 VPS 作为备份目的地 首先，我需要 500GB 以上的存储容量。市面上有很多选择，比如：
大公司做个人和企业云存储的服务，例如 Microsoft OneDrive（1TB $69.99/年）、Google One（2 TB $100/年） 等； 文件同步备份类型，如 Dropbox（2TB $119.88/年） 等； 小公司专业做备份的，如 CrashPlan（无限容量 $120/年） 等； 云计算公司的对象存储，如亚马逊和阿里巴巴对象存储等，此类存储空间、进出流量、请求次数都要收费，仅计算存储空间费用，以阿里巴巴为例，500GB 的存储空间一年就需要 $70.2。 大部分服务对于我来说太贵了，因为他们提供了更多的价值，例如版本控制，或者数不清几个 9 的服务保证。而我不想为这些额外的功能付费。唯一价格不错的，是 Onedrive。但群晖的 CloudSync 对 Onedrive 的支持似乎有问题，目前我尚未解决此问题，似乎与账号有关。若能找到 6 个人合买 Microsoft 365，那价格的优势就很大（特别是，如果你选择中国区的话），显然我也有动力全力解决此问题。（已确认是账号问题，更换账号后能关联账户，但测试了一下速度只有几百 KB/s，所以暂时不考虑。）
我选择的 Alpha VPS，位于保加利亚，1 TB 存储空间，每月 3TB 流量，每年只需要 60 欧元（约 $68）。如果选择更低的容量，则价格会更便宜。虽然 VPS 完全是裸机，没有附加功能（除非你愿意去学习一些软件的配置），但因为有 RAID 1 和移动硬盘的冷备份，对安全性要求没那么高，所以对于单纯的异地备份来说已经够用了。经过一天的测试，上传速度有 1.x MB/S，已经超过我的预期了，毕竟服务器在保加利亚那么遥远的地方。
二、如何在群晖上创建备份文件 为了存取方便，需要将每个图片文件夹分别打包，这样上传和下载都比较方便。但我之前的目录命名中有一些有空格，用脚本处理起来有些困难。所以就有了本文中两段小脚本。
批量移除文件名中的空格：
for loop in ls -1 | tr &amp;#39; &amp;#39; &amp;#39;#&amp;#39; do mv &amp;#34;echo $loop| sed &amp;#39;s/#/ /g&amp;#39;&amp;#34; &amp;#34;echo $loop|sed &amp;#39;s/#//g&amp;#39;&amp;#34; 2&amp;gt; /dev/null done 然后再使用 tar 将目录分别打包即可：</description></item><item><title>解决 Lean 固件编译后无 SSR-Plus 的问题</title><link>https://victoratmaoludotone.github.io/posts/add-ssr-plus-in-lean-openwrt-firmware/</link><pubDate>Tue, 19 May 2020 12:43:21 +0800</pubDate><guid>https://victoratmaoludotone.github.io/posts/add-ssr-plus-in-lean-openwrt-firmware/</guid><description>在最近的更新后，Lean 源码中删除了 SSR Plus + 功能模块。在编译路由器固件过程中，进入 Luci-Application 菜单后，找不到 luci-app-ssr-plus 选项，当然也就无法编译这一模块。
如果是初次编译，git clone 完成后，修改 feeds.conf.default 文件，将：
# src-git helloworld https://github.com/fw876/helloworld 前面的 # 去掉，修改为：
src-git helloworld https://github.com/fw876/helloworld 再进行 make menuconfig 等命令进行编译即可。
如果是二次编译，则执行以下命令：
$ git pull $ rm -rf ./tmp &amp;amp;&amp;amp; rm -rf .config 再编辑 feeds.config.default 文件，将 helloworld 一行前的 # 去掉。然后更新 feeds：
$ ./scripts/feeds clean $ ./scripts/feeds update -a &amp;amp;&amp;amp; ./scripts/feeds install -a 再进行 make menuconfig 等命令进行编译即可。</description></item><item><title>UBNT ER-X 刷 Open-WRT 并作为透明网关</title><link>https://victoratmaoludotone.github.io/posts/openwrt-on-erx-for-transparent-gateway/</link><pubDate>Tue, 07 Apr 2020 13:04:01 +0800</pubDate><guid>https://victoratmaoludotone.github.io/posts/openwrt-on-erx-for-transparent-gateway/</guid><description>一直想在家庭网络中增加一个透明网关，达到让网络中所有设备在访问国外网站时自动使用代理的功能。家中本身有一个 3215U + 4 千兆网口的工控机，但嫌弃其电源实在占位置所以没启用。最近才觉察到 UniFi Switch 8 POE 150W 的网口是可以自定义 PoE+ 或 24V Passive PoE 供电的，因为 ER-X 本身体积就小，又支持 24V Passive PoE 供电，这样就可以节省充电器和充电线，仅用一根网线即可供电和数据传输，简约而不简单。
一、编译 ER-X Open-WRT 固件 因为官方 Open-WRT 的固件内容比较素，缺乏必备的 ShadowsocksR Plus 等插件，所以我采用 Lean 的 Open-WRT 固件自行编译。编译此固件是需要编译机可无障碍访问国外部分网站，在虚拟机上使用：
$ export all_proxy=&amp;#34;socks5://your.proxy:1080&amp;#34; 尝试编译，依然失败，提示有文件无法下载。所以我最终采用在一台 Google Cloud Engine 机器上编译。编译时按照指引，在 make menuconfig 时：
Target System 选择 MediaTek Ralink MIPS
Subtarget 选择 MT7621 based boards
Target Profile 选择 EdgeRouter X</description></item><item><title>非对称加密的基本原理</title><link>https://victoratmaoludotone.github.io/posts/basic-principles-of-asymmetric-encryption/</link><pubDate>Fri, 14 Jun 2019 13:04:01 +0800</pubDate><guid>https://victoratmaoludotone.github.io/posts/basic-principles-of-asymmetric-encryption/</guid><description>非对称加密算法需要两个密钥：公开密钥（publickey，简称公钥）和私有密钥（privatekey，简称私钥）。公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。
非对称加密算法实现机密信息交换的基本过程是：
甲方生成一对密钥并将公钥公开；
需要向甲方发送信息的其他角色(乙方)使用该密钥(甲方的公钥)对机密信息进行加密后再发送给甲方；
甲方用自己私钥对加密后的信息进行解密。
甲方想要回复乙方时正好相反，使用乙方的公钥对数据进行加密，同理，乙方使用自己的私钥来进行解密。</description></item><item><title>Nexus 5X 解锁 Recovery 并 ROOT</title><link>https://victoratmaoludotone.github.io/posts/nexus-5x-unlock-recovery-and-root/</link><pubDate>Mon, 20 Jun 2016 13:04:01 +0800</pubDate><guid>https://victoratmaoludotone.github.io/posts/nexus-5x-unlock-recovery-and-root/</guid><description>注意：
进行以下操作会清除手机所有数据，请谨慎。
鉴于第一条，建议将手机恢复出厂状态进行操作，避免不必要的错误。
本文不适用于 Android N 系统，会导致无限 TEAMWIN 界面。
一、安装 Homebrew 和安卓开发者套件 安装 Homebrew（已安装的可以忽略此步骤）：
$ /usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; 安装安卓开发者套件：
$ brew install android-platform-tools 安装完成后，在终端输入 adb version，应该可以看到 adb 的版本号。
二、下载 SuperSU 和 TWRP Recovery SuperSU：http://download.chainfire.eu/supersu
TWRP：https://dl.twrp.me/bullhead/
SuperSU的包为.zip 格式，TWRP的包为.img 格式，两个包下载完后都不要进行解压缩或其他操作，将两个包放到任意一个文件夹中。
三、打开 USB 调试 在 设置 &amp;gt; 关于手机 中，拉到底部，连续点击 版本号，系统会提示 已开启开发者模式。
进入 设置 &amp;gt; 开发者选项 中，打开 OEM 解锁 和 USB 调试。使用数据线连接手机，在手机屏幕上会弹出提示是否允许当前计算机进行USB 调试，选择允许。在终端中输入 adb devices，如果连接正常，在 list of devices attached 下方会显示出手机设备的 id。</description></item><item><title>macOS 使用 ssh key 登陆服务器</title><link>https://victoratmaoludotone.github.io/posts/login-server-using-ssh-key-on-macos/</link><pubDate>Sat, 18 Jul 2015 13:04:01 +0800</pubDate><guid>https://victoratmaoludotone.github.io/posts/login-server-using-ssh-key-on-macos/</guid><description>先生成公钥和私钥，在 Mac OSX 终端（或 iTerm 2 等）中进入 ~/.ssh 目录，输入：
$ ssh-keygen -t rsa 会询问一些问题，直接全部回车，即可在 ~/.ssh 目录中生成 id_rsa（私钥） 和 id_rsa.pub（公钥）文件。我们需要将公钥上传到 testhost 服务器的 ~/.ssh 目录下面，因为第二种方式中我们已经配置了 testhost 服务器，scp 也能识别这个服务器，所以，可以使用如下命令将文件传输到 testhost 服务器中：
$ scp ~/.ssh/id_rsa.pub testhost:~/.ssh/ 接下来，用第二种方式登录到 testhost 服务器中，在 ~/.ssh 目录中使用以下命令将 id_rsa.pub 更名为 authorized_keys：
$ mv id_rsa.pub authorized_keys 最后确保下文件权限正常：
$ chmod 700 ~/.ssh/ $ chmod 600 ~/.ssh/authorized_keys 现在，我们可以在 Mac OSX 的终端中使用 ssh testhost 登录到 testhost 服务器了，无需输入密码，更无需记忆服务器参数。
如果无法连接，请在服务器的 /etc/ssh/sshd_config 文件中查看 PubkeyAuthentication 的值是否为 yes，如果不是，请修改为 yes ，并使用以下命令重启 ssh 服务：</description></item></channel></rss>