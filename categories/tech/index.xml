<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on 一间茅庐</title><link>https://maolu.one/categories/tech/</link><description>Recent content in Tech on 一间茅庐</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 16 Jun 2020 11:16:23 +0800</lastBuildDate><atom:link href="https://maolu.one/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 rsync 备份群晖资料到 VPS</title><link>https://maolu.one/posts/backup-synogy-to-vps-using-rsync/</link><pubDate>Tue, 16 Jun 2020 11:16:23 +0800</pubDate><guid>https://maolu.one/posts/backup-synogy-to-vps-using-rsync/</guid><description>
虽然家里的群晖做了 RAID 1，但看到有帖子说有人家里火灾导致 NAS 的热备份和硬盘的冷备份全部丢失，再加上最近在家赋闲，又想着折腾一番。 一、为什么要使用 VPS 作为备份目的地 首先，我需要 500GB 以上的存储容量。市面上有很多选择，比如： 大公司做个人和企业云存储的服务，例如 Microsoft OneDrive（1TB $69.99/年）、Google One（2 TB $100/年） 等； 文件同步备份类型，如 Dropbox（2TB $119.88/年） 等；...
&lt;p>&lt;a href="https://maolu.one/posts/backup-synogy-to-vps-using-rsync/">查看原文&lt;/a>&lt;/p></description></item><item><title>解决 Lean 固件编译后无 SSR-Plus 的问题</title><link>https://maolu.one/posts/add-ssr-plus-in-lean-openwrt-firmware/</link><pubDate>Tue, 19 May 2020 12:43:21 +0800</pubDate><guid>https://maolu.one/posts/add-ssr-plus-in-lean-openwrt-firmware/</guid><description>
在最近的更新后，Lean 源码中删除了 SSR Plus + 功能模块。在编译路由器固件过程中，进入 Luci-Application 菜单后，找不到 luci-app-ssr-plus 选项，当然也就无法编译这一模块。 如果是初次编译，git clone 完成后，修改 feeds.conf.default 文件，将： # src-git helloworld https://github.com/fw876/helloworld 前面的 # 去掉，修改为： src-git helloworld https://github.com/fw876/helloworld 再进行 make menuconfig 等命令进行编译即可。 如果是二次编译，则执行以下命令： $ git pull $ rm -rf ./tmp &amp;&amp; rm -rf .config 再编辑 feeds.config.default 文件，将 helloworld 一行前的 # 去掉。然后更新 feeds： $ ./scripts/feeds clean $ ./scripts/feeds update -a &amp;&amp; ./scripts/feeds install -a 再进行 make menuconfig 等命令进行编译即...
&lt;p>&lt;a href="https://maolu.one/posts/add-ssr-plus-in-lean-openwrt-firmware/">查看原文&lt;/a>&lt;/p></description></item><item><title>UBNT ER-X 刷 Open-WRT 并作为透明网关</title><link>https://maolu.one/posts/openwrt-on-erx-for-transparent-gateway/</link><pubDate>Tue, 07 Apr 2020 13:04:01 +0800</pubDate><guid>https://maolu.one/posts/openwrt-on-erx-for-transparent-gateway/</guid><description>
一直想在家庭网络中增加一个透明网关，达到让网络中所有设备在访问国外网站时自动使用代理的功能。家中本身有一个 3215U + 4 千兆网口的工控机，但嫌弃其电源实在占位置所以没启用。最近才觉察到 UniFi Switch 8 POE 150W 的网口是可以自定义 PoE+ 或 24V Passive PoE 供电的，因为 ER-X 本身体积就小，又支持 24V Passive PoE 供电，这样就可以节省充电器和充电线，仅用一根网线即可供电和数据传输，简约而不简单。 一、编译 ER-X Open-WRT 固件 因为官方 Open-WRT 的固件内容比较素，缺乏必备的 ShadowsocksR Plus 等插件...
&lt;p>&lt;a href="https://maolu.one/posts/openwrt-on-erx-for-transparent-gateway/">查看原文&lt;/a>&lt;/p></description></item><item><title>非对称加密的基本原理</title><link>https://maolu.one/posts/basic-principles-of-asymmetric-encryption/</link><pubDate>Fri, 14 Jun 2019 13:04:01 +0800</pubDate><guid>https://maolu.one/posts/basic-principles-of-asymmetric-encryption/</guid><description>
非对称加密算法需要两个密钥：公开密钥（publickey，简称公钥）和私有密钥（privatekey，简称私钥）。公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。 非对称加密算法实现机密信息交换的基本过程是： 甲方生成一对密钥并将公钥公开； 需要向甲方发送信息的其他角色(乙方)使用该密钥(甲方的公钥)对机密信息进...
&lt;p>&lt;a href="https://maolu.one/posts/basic-principles-of-asymmetric-encryption/">查看原文&lt;/a>&lt;/p></description></item><item><title>Nexus 5X 解锁 Recovery 并 ROOT</title><link>https://maolu.one/posts/nexus-5x-unlock-recovery-and-root/</link><pubDate>Mon, 20 Jun 2016 13:04:01 +0800</pubDate><guid>https://maolu.one/posts/nexus-5x-unlock-recovery-and-root/</guid><description>
注意： 进行以下操作会清除手机所有数据，请谨慎。 鉴于第一条，建议将手机恢复出厂状态进行操作，避免不必要的错误。 本文不适用于 Android N 系统，会导致无限 TEAMWIN 界面。 一、安装 Homebrew 和安卓开发者套件 安装 Homebrew（已安装的可以忽略此步骤）： $ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 安装安卓开发者套件： $ brew install android-platform-tools 安装完成后，在终端输入 adb version，应该可以看到 adb 的版本号。 二、下载 SuperSU 和 TWRP Recovery SuperSU：http://download.chain...
&lt;p>&lt;a href="https://maolu.one/posts/nexus-5x-unlock-recovery-and-root/">查看原文&lt;/a>&lt;/p></description></item><item><title>macOS 使用 ssh key 登陆服务器</title><link>https://maolu.one/posts/login-server-using-ssh-key-on-macos/</link><pubDate>Sat, 18 Jul 2015 13:04:01 +0800</pubDate><guid>https://maolu.one/posts/login-server-using-ssh-key-on-macos/</guid><description>
先生成公钥和私钥，在 Mac OSX 终端（或 iTerm 2 等）中进入 ~/.ssh 目录，输入： $ ssh-keygen -t rsa 会询问一些问题，直接全部回车，即可在 ~/.ssh 目录中生成 id_rsa（私钥） 和 id_rsa.pub（公钥）文件。我们需要将公钥上传到 testhost 服务器的 ~/.ssh 目录下面，因为第二种方式中我们已经配置了 testhost 服务器，scp 也能识别这个服务器，所以，可以使用如下命令将文件传输到 testhost 服务器中： $ scp ~/.ssh/id_rsa.pub testhost:~/.ssh/ 接下来，用第二种方式登录到 testhost 服务器中，在 ~/.ssh 目录中使用以下命令将 id_rsa.pub 更...
&lt;p>&lt;a href="https://maolu.one/posts/login-server-using-ssh-key-on-macos/">查看原文&lt;/a>&lt;/p></description></item></channel></rss>