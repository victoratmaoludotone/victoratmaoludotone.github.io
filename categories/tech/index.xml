<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on 一间茅庐</title><link>https://maolu.one/categories/tech/</link><description>Recent content in Tech on 一间茅庐</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 06 Jul 2020 22:37:41 +0800</lastBuildDate><atom:link href="https://maolu.one/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>博客切换到 Hugo 的一些记录</title><link>https://maolu.one/posts/switch-blog-to-hugo/</link><pubDate>Mon, 06 Jul 2020 22:37:41 +0800</pubDate><guid>https://maolu.one/posts/switch-blog-to-hugo/</guid><description>&lt;p>因为实在是喜爱当前的这个主题&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> ，所以这两天将博客改为 Hugo 系统，并且托管在 Github Pages 上，一年还能省四五百块大洋。初次接触 Hugo，颤颤巍巍、如履薄冰，不过最终还是将其搭建并部署起来了。今天基本完善，记录一下中间遇到的一些问题。&lt;/p>
&lt;h2 id="一hugo-主题的使用">一、Hugo 主题的使用&lt;/h2>
&lt;p>如果你在 Hugo 的 Git 根目录中使用 &lt;code>git clone&lt;/code> 某个主题到 Hugo 的 themes 目录下，则你在部署到 Github 的时候会遇到问题。例如我现在使用的主题：&lt;/p>
&lt;pre>&lt;code>$ git clone git@github.com:joway/hugo-theme-yinyang.git themes/yinyang
&lt;/code>&lt;/pre>&lt;p>当你想要部署到 Github 时，会提示一个 Git 中包含了另一个 Git，无法处理。所以在使用 Github 上的主题时，不要使用 &lt;code>git clone&lt;/code> ，而要使用 &lt;code>git submodule add&lt;/code> ：&lt;/p>
&lt;pre>&lt;code>$ git clone git@github.com:joway/hugo-theme-yinyang.git themes/yinyang
&lt;/code>&lt;/pre>&lt;h2 id="二使用-github-actions-自动化部署">二、使用 Github Actions 自动化部署&lt;/h2>
&lt;p>如果你愿意，可以在本地使用 &lt;code>hugo&lt;/code> 命令生成静态文件到 public 目录，再将 public 目录提交到你的 Github Pages 页面。其实这样也不太繁琐，问题是网站程序的源代码没有使用 Github 上，再多台设备上写博客就不太方便了。而且显然源代码和文章的 &lt;code>.md&lt;/code> 文件托管到 Github 上几乎没有丢失的风险，安全性更好。&lt;/p>
&lt;p>我认可的方式是使用两个 Git 仓库来部署，一个私有仓库存放源代码，一个公开的 Github Pages 仓库存放静态页面，具体的方式可以自行搜索&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> 。&lt;/p>
&lt;h2 id="三rss-相关">三、RSS 相关&lt;/h2>
&lt;p>Hugo 默认的 RSS 功能至少存在一下两个问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>没有控制 RSS 输出的条目数量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RSS 为纯文本，且内容过短。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>RSS 输出的条目数量，可以通过在配置文件 &lt;code>config.toml&lt;/code> 中增加以下配置控制：&lt;/p>
&lt;pre>&lt;code>[services.rss]
limit = 15
&lt;/code>&lt;/pre>&lt;p>RSS 内容过短，原因是 Hugo 默认的 RSS 条目显示的是摘要，默认的摘要长度为 70 个&lt;strong>单词&lt;/strong>，中文没有单词的概念，所以 RSS 输出的条目内容会极短。在 &lt;code>config.toml&lt;/code> 中增加以下配置解决中文长度计算的问题，并且自定义摘要长度：&lt;/p>
&lt;pre>&lt;code>hasCJKLanguage = true
summaryLength = 200
&lt;/code>&lt;/pre>&lt;p>注意：设置 &lt;code> hasCJKLanguage = true&lt;/code> 后，部分主题会收到一些影响，需自行尝试。&lt;/p>
&lt;p>而想要将 RSS 输出为全文且包含格式，则需要覆盖默认的 RSS 模版。&lt;/p>
&lt;ol>
&lt;li>新建 &lt;code>/layout/_default/rss.xml&lt;/code> 文件；&lt;/li>
&lt;li>将 hugo 默认的 rss.xml 模版&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> 填充到刚刚建立的 rss.xml 中；&lt;/li>
&lt;li>修改填充好的 rss.xml，将 &lt;code>&amp;lt;description&amp;gt;{{ .Summary | html }}&amp;lt;/description&amp;gt;&lt;/code> 修改为 &lt;code>&amp;lt;description&amp;gt;{{ .Content | html }}&amp;lt;/description&amp;gt;&lt;/code> 。&lt;/li>
&lt;/ol>
&lt;p>通过这样的模版修改，可以实现更多的自定义功能。比如你更想输出纯文本的摘要，但希望在摘要后面增加“&amp;hellip;阅读更多”链接，可以通过修改 &lt;code>&amp;lt;description&amp;gt;&lt;/code> 段为：&lt;/p>
&lt;pre>&lt;code>&amp;lt;description&amp;gt;
{{ .Summary }}{{ print &amp;quot;...&amp;quot; }}
{{ print &amp;quot;&amp;lt;p&amp;gt;&amp;lt;a href=\&amp;quot;&amp;quot; }}{{ .Permalink }}{{ print &amp;quot;\&amp;quot;&amp;gt;查看原文&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;quot; }}
&amp;lt;/description&amp;gt;
&lt;/code>&lt;/pre>&lt;p>我对 Hugo 的模版语言非常不了解，所以其他自定义方式就没有再探寻。&lt;/p>
&lt;h2 id="四让链接在新标签页中打开">四、让链接在新标签页中打开&lt;/h2>
&lt;p>Markdown 无法定义链接是否在新标签页中打开，所以 Hugo 渲染出的博客文章中，链接全部都是在当前标签页中打开。要解决此问题，也需要对对模版进行一定的 hack。&lt;/p>
&lt;ol>
&lt;li>新建 &lt;code>/layout/_default/_markup/render-link.html&lt;/code> 文件&lt;/li>
&lt;li>在该文件中填充以下内容：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>&amp;lt;a href=&amp;quot;{{ .Destination | safeURL }}&amp;quot; {{ with .Title}} title=&amp;quot;{{ . }}&amp;quot;
{{ end }}{{ if strings.HasPrefix .Destination &amp;quot;http&amp;quot; }} target=&amp;quot;_blank&amp;quot; {{ end }}&amp;gt;{{ .Text }}&amp;lt;/a&amp;gt;
&lt;/code>&lt;/pre>&lt;p>如此修改后，链接就都是在新标签页中打开了。&lt;/p>
&lt;h2 id="五hugo-评论-disqus-配置">五、Hugo 评论 Disqus 配置&lt;/h2>
&lt;p>如果你的主题支持 Disqus，则可以在 Hugo 中使用 Disqus 评论系统。使用 Disqus 一般需要让你在配置文件中增加 Disqus shortname 配置，刚开始我以为 shortname 就是 Disqus 账户的 Username，所以一直没成功。后面才发现 shortname 是需要去 Disqus 网站开通 Your Site 功能&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> 才能获取和定义的。获取 Disqus shortname 后，在配置文件中增加以下配置即可：&lt;/p>
&lt;pre>&lt;code>[params]
disqus = &amp;quot;your_disqus_shortname&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="六文章中图片处理">六、文章中图片处理&lt;/h2>
&lt;p>如果不使用第三方的图片服务，那么需要将图片放置到 /static 目录下，这样就能通过类似 &lt;code>https://yourblog.com/image_name.jpg&lt;/code> 的网址访问到。/static 目录也支持子目录。&lt;/p>
&lt;p>如果你使用 Typora 编辑器编辑 Markdown 文件，则可以使用集成的图片上传功能上传图片到第三方图片服务器上。&lt;/p>
&lt;p>&lt;img src="https://images.maolu.one/20200707001731.png" alt="">&lt;/p>
&lt;p>具体如何配置，请参看 &lt;em>Typora 支持 PicGo 来上传图片了&lt;/em>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> 。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在这次转换过程中，还遇到了很多问题，有些解决了，有些没解决。总体感觉：&lt;/p>
&lt;ol>
&lt;li>Hugo 的模版很精美，也很实用。我本来不太想换到 Hugo，但上周发现的这个主题对我的诱惑太大了。&lt;/li>
&lt;li>WordPress 是全能的发布平台，Hugo 则非常轻量化。虽然 WordPress 全能，但并不意味着入门难。因为一方面文档齐全且用户量大，可以搜索到的教程也多；另一方面，PHP + MySQL，程序 + 数据库的模式也深入人心；第三是 WordPress 有体验不错的管理后台和文章编辑器，写文章发文章比较简单；最后是 PHP 的广泛影响力，虽然现在有很多新的“更好的”编程语言，但毕竟“PHP 是最好的语言”。Hugo 则更适合有一定编程经验和运维经验的人使用。&lt;/li>
&lt;li>Hugo 还很年轻。文档读起来不那么顺，更新也不是很及时。其作者 bep 倒是经常在 hugo 社区回复问题，这解决了一部分文档更新不及时的问题。&lt;/li>
&lt;/ol>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/joway/hugo-theme-yinyang" target="_blank" >YinYang is a black-white theme for Hugo.&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>例如：&lt;a href="https://zhuanlan.zhihu.com/p/109057290" target="_blank" >折腾Hugo | GitHub Pages | Github Actions自动构建发布免费个人网站&lt;/a> ，但此文章有一些错误，例如脚本中对 &lt;code>actions/checkout@v1&lt;/code> 其实可以是 &lt;code>actions/checkout@v2&lt;/code> ，另外 ``deploy_key` 也前后不一致，需要注意。 &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/embedded/templates/_default/rss.xml" target="_blank" >Hugo 默认的 rss.xml 模版&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://disqus.com/admin/create/" target="_blank" >创建 Disqus 站点&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>&lt;a href="https://molunerfinn.com/typora-supports-picgo/" target="_blank" >Typora 支持 PicGo 来上传图片了&lt;/a> &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Nexus 5X 解锁 Recovery 并 ROOT</title><link>https://maolu.one/posts/nexus-5x-unlock-recovery-and-root/</link><pubDate>Mon, 20 Jun 2016 13:04:01 +0800</pubDate><guid>https://maolu.one/posts/nexus-5x-unlock-recovery-and-root/</guid><description>&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>进行以下操作会清除手机所有数据，请谨慎。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>鉴于第一条，建议将手机恢复出厂状态进行操作，避免不必要的错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文不适用于 Android N 系统，会导致无限 TEAMWIN 界面。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h2 id="一安装-homebrew-和安卓开发者套件">一、安装 Homebrew 和安卓开发者套件&lt;/h2>
&lt;p>安装 Homebrew（已安装的可以忽略此步骤）：&lt;/p>
&lt;pre>&lt;code>$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code>&lt;/pre>&lt;p>安装安卓开发者套件：&lt;/p>
&lt;pre>&lt;code>$ brew install android-platform-tools
&lt;/code>&lt;/pre>&lt;p>安装完成后，在终端输入 &lt;code>adb version&lt;/code>，应该可以看到 adb 的版本号。&lt;/p>
&lt;h2 id="二下载-supersu-和-twrp-recovery">二、下载 SuperSU 和 TWRP Recovery&lt;/h2>
&lt;p>SuperSU：&lt;a href="http://download.chainfire.eu/supersu" target="_blank" >http://download.chainfire.eu/supersu&lt;/a>&lt;/p>
&lt;p>TWRP：&lt;a href="https://dl.twrp.me/bullhead/" target="_blank" >https://dl.twrp.me/bullhead/&lt;/a>&lt;/p>
&lt;p>SuperSU的包为&lt;code>.zip&lt;/code> 格式，TWRP的包为&lt;code>.img&lt;/code> 格式，两个包下载完后都不要进行解压缩或其他操作，将两个包放到任意一个文件夹中。&lt;/p>
&lt;h2 id="三打开-usb-调试">三、打开 USB 调试&lt;/h2>
&lt;p>在 &lt;em>&lt;strong>设置 &amp;gt; 关于手机&lt;/strong>&lt;/em> 中，拉到底部，连续点击 &lt;em>&lt;strong>版本号&lt;/strong>&lt;/em>，系统会提示 &lt;em>&lt;strong>已开启开发者模式&lt;/strong>&lt;/em>。&lt;/p>
&lt;p>进入 &lt;em>&lt;strong>设置 &amp;gt; 开发者选项&lt;/strong>&lt;/em> 中，打开 &lt;em>&lt;strong>OEM 解锁&lt;/strong>&lt;/em> 和 &lt;em>&lt;strong>USB 调试&lt;/strong>&lt;/em>。使用数据线连接手机，在手机屏幕上会弹出提示是否允许当前计算机进行USB 调试，选择允许。在终端中输入 &lt;code>adb devices&lt;/code>，如果连接正常，在 list of devices attached 下方会显示出手机设备的 id。&lt;/p>
&lt;h2 id="四解锁-bootloader-并输入-twrp-recovery">四、解锁 Bootloader 并输入 TWRP Recovery&lt;/h2>
&lt;blockquote>
&lt;p>注意：解锁将清除手机所有数据。&lt;/p>
&lt;/blockquote>
&lt;p>在 Shell 中，输入&lt;code>adb reboot bootloader&lt;/code>，手机会重启进入 Bootloader 状态。如果之前没有解锁过，在 Bootloader 中，底部的 DEVICE STATE 会显示为 locked 状态。在 Shell 中，输入 &lt;code>fastboot oem unlock&lt;/code>，手机屏幕将会提示是否解锁，使用音量键选中 YES，按电源键确定，手机将解锁。接着进行下一步。&lt;/p>
&lt;p>在 Shell 中，输入 &lt;code>fastboot flash recovery&lt;/code> ，不要回车，将下载的 twrp recovery 拖到 Shell 中，构成完整的命令。按下回车，开始刷入。&lt;/p>
&lt;p>在手机上使用音量上下键，切换到 &lt;em>&lt;strong>Restart bootloader&lt;/strong>&lt;/em> 选项，然后按电源键，重启到 Bootloader，然后再使用音量键，切换到 Recovery mode，按电源键，重启到 Recovery 环境。如果刷入成功，你将看到 TEAMWIN 的 Recovery 启动画面并进入 TWRP Recovery。&lt;/p>
&lt;h2 id="五安装-supersu">五、安装 SuperSU&lt;/h2>
&lt;p>在 TWRP Recovery 中，选择 &lt;em>&lt;strong>Reboot &amp;gt; System&lt;/strong>&lt;/em>，重启手机。将下载的 SuperSU 放到手机的 Download 文件夹中。我在 OS X 中使用的 &lt;em>&lt;strong>Android File Transfer&lt;/strong>&lt;/em> 进行文件传输。&lt;/p>
&lt;p>输入&lt;code>adb reboot recovery&lt;/code>，重启手机，并进入 TWRP Recovery。选择 &lt;em>&lt;strong>Install&lt;/strong>&lt;/em>，进入 Download 文件夹，选择下载的 SuperSU 文件，滑动底部滑块，开始刷入。刷完之后，选择 &lt;em>&lt;strong>Wipe cache/dalvik&lt;/strong>&lt;/em>，然后选择 &lt;em>&lt;strong>Reboot System&lt;/strong>&lt;/em> 进入系统。进入系统后，应用中应该有了 SuperSU，ROOT完成。&lt;/p></description></item></channel></rss>